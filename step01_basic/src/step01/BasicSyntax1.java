/* 객체 지향의 객체 생성 주 목적
 * - 데이터를 메모리에 생성후 사용하기 위함
 * 
 * 프로그램 관점에서의 객체 생성 주 목적
 * - 생성된 데이터 사용과 메소드 호출 
 * - 예외
 * 	데이터가 없는 클래스, 메소드는 다수 존재
 * 	- 객체 생성 필요성이 없는 경우의 해결점
 * 	- 메소드 구현시에 객체 생성없이 호출 가능한 방법
 * 		: static 키워드 
 * 		: static 로 구성된 메소드를 다수 보유한 API 활용
 * 		
 */

package step01;

public class BasicSyntax1 {
	
	public BasicSyntax1(){}// 컴파일시에 기본 생성자 자동 추가 필수
	
	
	//사용자 정의 메소드 구현 -> 사용자가 직접 필요시에 호출
	/* 호출시 문법적인 제약조건
	 * - 객체(인스턴스)라는 것을 실제 메모리에 생성 후 메소드 호출
	 * 
	 * - 객체
	 * 	1. 객체 - 범용적으로 사용되는 표현법
	 * 	2. 인스턴스 - 실제 메모리에 사용 가능한 객체
	 * 
	 * - 객체 생성 문법
	 * 	new 생성자([..]);
	 * 
	 * - java 클래스 구성 요소
	 * 	1. 데이터 - 변수
	 *  2. 기능 - 메소드
	 *  3. 해당 클래스에 종속적인 객체 생성 기능 - 생성자 (클래스명과 동일)
	 * 
	 * - python	class
	 *  1. 데이터 - 변수
	 *  2. 기능 - 메소드
	 *  3. 해당 클래스에 종속저깅 객체 생성 기능 - __init__ 
	 *  
	 */
	
	
	
	//실행을 위한 특별 메소드
	//>java BasicSyntax1 실행시 main 메소드 자동 실행
	// main 호출은 jre
	public static void main(String[] args) {
		//문자열 : String / 32bit 정수 : int
		/*
		 * String name = "웅빈";
		 * 실행시 실행 순서
		 * String
		 * 		name 이라는 메모리 확보
		 * 			"웅빈" 문자열 데이터가 메모리 생성
		 * 				= 대입
		 * 					; 종료
		 */
		
		
		String name = "웅빈";
		int age = 20;
		
		System.out.println(name);
	}

}
