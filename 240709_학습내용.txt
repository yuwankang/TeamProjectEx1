- 객체 지향 언어
    -데이터와 데이터를 처리하는 기능들을 하나의 묶음으로 유연하게 관리
    -재사용성 고려
    -종류
        python(객체기반, class문법), java/js(객체기반, class문법), sql, linux(일반명령어, shell programing) c#, 코틀린


1. 데이터 표현
    문자열, 숫자...
    포멧 - 어떤 형식의 데이터를 몇 개 저장
    변수
        변수 - 데이터
        변수명 - 데이터를 활용하기 위해 부여하는 이름
                변수 즉 데이터가 저장된 메모리에 부여하는 구분 이름
        변수에 대입되는 데이터 - 형식에 맞게 해당 메모리에 저장

        1.java - 타입 변수명
        2.python, js - 변수명
            -타입 선언없이 변수명만 선언을 활용
            python
            -data = "한글" 문자열의 변수
             data = 10  정수형의 변수
            js
            -data = "한글";
             data = 10;

2. 데이터를 가공하는 방법
    -저장, 활용, 삭제
    -기능 : 함수, 메소드, func

    -두개의 숫자 받아서 _+한 후에 연산 결과 반환하능 기능 구현 : 메소드
        

        python 
            def 함수(parameter):
            데이터1 + 데이터2
            호출한곳으로 int 값을 반환

        js
            function(parameter){
                데이터1 + 데이터2
                호출한곳으로 int 값을 반환
            }
3. 개발 방식 -> 실행
    *.java 개발 -> 컴파일 -> 실행

4. 용어
- 변수에 데이터 저장
    -초기화, 대입, 저장

-메소드: class 내부에서만 개발되는 기능
        -java에선 class 내부에서만 기능 개발
-함수: class와 무관하게 개발되는 기능
        python, js

- RDBMS의 기능
    -함수
    -프로시저

5. {} 용도
-java 와 js 공통
    범위 설정
    메소드(함수), 클래스, 반복문, 조건문 자체의 영역 지정

- 참고
    python
        :(콜론) 과 들여쓰기

6. ;(세미콜론) 용도
-sql문장 끝, java, js의 하나의 문장(로직) 마무리시 필수



lombok
->자바코드에 애노테이션 설정으로 코드 자동생성

@NoArgsConstructor
@AllArgsConstructor
@Setter // 각 변수별 데이터 수정 메소드 자동 생성하는 표현
@Getter